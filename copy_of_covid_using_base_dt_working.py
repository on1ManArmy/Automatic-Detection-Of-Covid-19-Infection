# -*- coding: utf-8 -*-
"""Copy of Covid_using_base_dt_working.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DCVmsZwY1ykk7UD1OK2GPXiks11SRdTP

# To ignore warning
"""

import warnings
warnings.filterwarnings("ignore")

"""# Importing important data visualization libraries"""

import numpy as np
import pandas as pd
import os
import shutil # The shutil module offers a number of high-level operations on files
import glob
import matplotlib.pyplot as plt

"""# Mounting the dataset from Gdrive"""

from google.colab import drive
drive.mount('/content/gdrive')

"""# Unzipping the dataset to be used by anyone"""

!unzip "/content/gdrive/MyDrive/X-Ray_Image_DataSets.zip"

"""# Working with images + image_ROUTES"""

# !rm -rf '/content/X-Ray_Image_DataSet/Viral Pneumonia'

ROOT_DIR = "/content/X-Ray_Image_DataSet"
imgs = ['COVID','Normal']

NEW_DIR = "/content/all_images/"

# copying all the images to a new directory

if not os.path.exists(NEW_DIR):
  os.mkdir(NEW_DIR)

  for i in imgs:
    org_dir = os.path.join(ROOT_DIR, i+"/")

    for imgfile in glob.iglob(os.path.join(org_dir, "*.png")):
      shutil.copy(imgfile, NEW_DIR)
      
else:
  print("Already Exist")

map = {'COVID':0,'Normal':0}

print(map)

for i in imgs:
  for cnt in glob.iglob(NEW_DIR+i+"*"):
    map[i] += 1

print(map)

"""# Dividing the datasets into 3 Phases 

"""


pip install split-folders

import splitfolders

input_folder = '/content/X-Ray_Image_DataSet/'

splitfolders.ratio(input_folder, output='/content/all_images/train_test_split', seed=43, ratio=(.7, .2, .1), group_prefix=None) # default values

"""# Model tarining + Routes"""

train_path  = "/content/all_images/train_test_split/train"
valid_path  = "/content/all_images/train_test_split/val"
test_path   = "/content/all_images/train_test_split/test"

from keras.preprocessing.image import ImageDataGenerator
from keras.applications import vgg16
from keras.models import Model
from keras.layers import Dense, MaxPool2D, Conv2D
import keras

train_data_generation = ImageDataGenerator(preprocessing_function= vgg16.preprocess_input , zoom_range= 0.2, horizontal_flip= True, 
                                           shear_range= 0.2 , rescale= 1./255)
train = train_data_generation.flow_from_directory(directory= train_path , target_size=(224,224), batch_size=1024)
print(train.next)

validation_data_generation = ImageDataGenerator(preprocessing_function= vgg16.preprocess_input , zoom_range= 0.2, horizontal_flip= True, 
                                           shear_range= 0.2 , rescale= 1./255)
valid = validation_data_generation.flow_from_directory(directory= valid_path , target_size=(224,224), batch_size=1024)

test_data_generation = ImageDataGenerator(preprocessing_function= vgg16.preprocess_input, rescale= 1./255 )
test = test_data_generation.flow_from_directory(directory= test_path , target_size=(224,224), batch_size=1024, shuffle= False)

from sklearn.model_selection import train_test_split

X_train, y_train = train.next()
X_test, y_test = valid.next()

from tensorflow.keras.layers import Input, Lambda, Dense, Flatten,Conv2D
from tensorflow.keras.models import Model
from tensorflow.keras.applications.vgg19 import VGG19
from tensorflow.keras.applications.resnet50 import preprocess_input
from tensorflow.keras.preprocessing import image
from tensorflow.keras.preprocessing.image import ImageDataGenerator,load_img
from tensorflow.keras.models import Sequential
import numpy as np
from glob import glob
import matplotlib.pyplot as plt
from tensorflow.keras.layers import MaxPooling2D
from keras.layers import Activation, Dense

from keras.applications.vgg19 import VGG19
from keras.layers import Flatten, Dense, Dropout, MaxPool2D

from __future__ import print_function, division
from builtins import range, input

from tensorflow.keras.layers import Input, Lambda, Dense, Flatten, GlobalAveragePooling2D, Dropout
from tensorflow.keras.models import Model, load_model
from tensorflow.keras.applications import VGG19
from tensorflow.keras.applications.vgg16 import preprocess_input
from tensorflow.keras.preprocessing import image
from tensorflow.keras.preprocessing.image import ImageDataGenerator

from sklearn.metrics import plot_confusion_matrix, roc_curve
import seaborn as sns
import numpy as np
import matplotlib.pyplot as plt

from glob import glob
import pandas as pd





model = Sequential()
model.add(Conv2D(16,(5,5),padding='valid',input_shape = X_train.shape[1:]))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2,2),strides=2,padding = 'valid'))
model.add(Dropout(0.4))
model.add(Conv2D(32,(5,5),padding='valid'))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2,2),strides=2,padding = 'valid'))
model.add(Dropout(0.6))
model.add(Conv2D(64,(5,5),padding='valid'))
model.add(Activation('relu'))
model.add(Dropout(0.8))
model.add(Flatten())
model.add(Dense(2))
model.add(Activation('softmax'))

model_feat = Model(inputs=model.input,outputs=model.output)
feat_train = model_feat.predict(X_train)
feat_test = model_feat.predict(X_test)

y_pred = model.predict(X_test, batch_size=1024)

# Convert to Binary classes
y_pred_bin = np.argmax(y_pred, axis=1)
y_test_bin = np.argmax(y_test, axis=1)

y_pred_bin, y_test_bin

from sklearn.tree import DecisionTreeClassifier

dt = DecisionTreeClassifier(criterion = "entropy", random_state = 100,max_depth=3, min_samples_leaf=5)
dt.fit(feat_train,np.argmax(y_train,axis=1))

dt.score(feat_test,np.argmax(y_test,axis=1))







































































train.class_indices

class_type = {0: 'Covid', 1: 'Normal'}

t_img , label = train.next()

def plotImages(img_arr, label):

  for im, l in zip(img_arr,label) :
    plt.figure(figsize= (5,5))
    plt.imshow(im, cmap = 'gray')
    plt.title(im.shape)
    plt.axis = False
    plt.show()

plotImages(t_img, label)

"""# VGG19

"""

from keras.applications.vgg19 import VGG19
from keras.layers import Flatten, Dense, Dropout, MaxPool2D

vgg = VGG19(input_shape=(224, 224, 3), include_top=False);

for layer in vgg.layers:           # Dont Train the parameters again 
  layer.trainable = False

x = Flatten()(vgg.output)

x = Flatten()(vgg.output)
x = Dense(units=2 , activation='sigmoid', name = 'predictions' )(x)

model = Model(vgg.input, x)

model.summary()

model.compile(optimizer='adam', loss = 'categorical_crossentropy', metrics=['accuracy'])

# implementing early stopping and model check point 

from keras.callbacks import EarlyStopping
from keras.callbacks import ModelCheckpoint

es = EarlyStopping(monitor= "val_accuracy" , min_delta= 0.01, patience= 3, verbose=1)
mc = ModelCheckpoint(filepath="bestmodel.h5", monitor="val_accuracy", verbose=1, save_best_only= True)

hist = model.fit_generator(train, steps_per_epoch=10, epochs=10, validation_data=valid, validation_steps=32, callbacks=[es, mc])

from keras.models import  load_model
model = load_model("bestmodel.h5")

"""# Model performance"""

h = hist.history
h.keys()

plt.plot(h['accuracy'])
plt.plot(h['val_accuracy'] , c = "red")
plt.title("acc vs v-acc")
plt.show()

plt.plot(h['loss'])
plt.plot(h['val_loss'] , c = "red")
plt.title("loss vs v-loss")
plt.show()

from keras.preprocessing import image

def get_img_array(img_path):
  path = img_path
  img = image.load_img(path, target_size=(224, 224, 3))
  img = image.img_to_array(img)/255
  img = np.expand_dims(img, axis = 0)

  return img

path = "/content/all_images/COVID-1478.png"

img = get_img_array(path)

res = class_type[np.argmax(model.predict(img))]

print(f"The given X-Ray image is of type = {res}")
print()
print(f"The chances of image being Covid is : {model.predict(img)[0][0]*100} percent")
print()
print(f"The chances of image being Normal is : {model.predict(img)[0][1]*100} percent")

# to display the image  
plt.imshow(img[0], cmap = "gray")
plt.title("input image")
plt.show()

"""#VGG16"""

from keras.applications.vgg16 import VGG16
from keras.layers import Flatten, Dense, Dropout, MaxPool2D

vgg1 = VGG16(input_shape=(224, 224, 3), include_top=False);

for layer in vgg1.layers:           # Dont Train the parameters again 
  layer.trainable = False

x = Flatten()(vgg1.output)

x = Flatten()(vgg1.output)
x = Dense(units=2 , activation='sigmoid', name = 'predictions' )(x)

model1 = Model(vgg1.input, x)

model1.summary()

model1.compile(optimizer='adam', loss = 'categorical_crossentropy', metrics=['accuracy'])

# implementing early stopping and model check point 

from keras.callbacks import EarlyStopping
from keras.callbacks import ModelCheckpoint

es = EarlyStopping(monitor= "val_accuracy" , min_delta= 0.01, patience= 3, verbose=1)
mc = ModelCheckpoint(filepath="bestmodel.h5", monitor="val_accuracy", verbose=1, save_best_only= True)

hist = model1.fit_generator(train, steps_per_epoch=10, epochs=10, validation_data=valid, validation_steps=32, callbacks=[es, mc])

from keras.models import  load_model
model = load_model("bestmodel.h5")

h = hist.history
h.keys()

plt.plot(h['accuracy'])
plt.plot(h['val_accuracy'] , c = "red")
plt.title("acc vs v-acc")
plt.show()

plt.plot(h['loss'])
plt.plot(h['val_loss'] , c = "red")
plt.title("loss vs v-loss")
plt.show()

from keras.preprocessing import image

def get_img_array(img_path):
  path = img_path
  img = image.load_img(path, target_size=(224, 224, 3))
  img = image.img_to_array(img)/255
  img = np.expand_dims(img, axis = 0)

  return img

path = "/content/all_images/COVID-2577.png"

img = get_img_array(path)

res = class_type[np.argmax(model.predict(img))]

print(f"The given X-Ray image is of type = {res}")
print()
print(f"The chances of image being Covid is : {model.predict(img)[0][0]*100} percent")
print()
print(f"The chances of image being Normal is : {model.predict(img)[0][1]*100} percent")

# to display the image  
plt.imshow(img[0], cmap = "gray")
plt.title("input image")
plt.show()

"""#GRAD-CAM Visualizations


"""

import tensorflow as tf

# this function is udes to generate the heat map of aan image
def make_gradcam_heatmap(img_array, model, last_conv_layer_name, pred_index=None):
    # First, we create a model that maps the input image to the activations
    # of the last conv layer as well as the output predictions
    grad_model = tf.keras.models.Model(
        [model.inputs], [model.get_layer(last_conv_layer_name).output, model.output]
    )

    # Then, we compute the gradient of the top predicted class for our input image
    # with respect to the activations of the last conv layer
    with tf.GradientTape() as tape:
        last_conv_layer_output, preds = grad_model(img_array)
        if pred_index is None:
            pred_index = tf.argmax(preds[0])
        class_channel = preds[:, pred_index]

    # This is the gradient of the output neuron (top predicted or chosen)
    # with regard to the output feature map of the last conv layer
    grads = tape.gradient(class_channel, last_conv_layer_output)

    # This is a vector where each entry is the mean intensity of the gradient
    # over a specific feature map channel
    pooled_grads = tf.reduce_mean(grads, axis=(0, 1, 2))

    # We multiply each channel in the feature map array
    # by "how important this channel is" with regard to the top predicted class
    # then sum all the channels to obtain the heatmap class activation
    last_conv_layer_output = last_conv_layer_output[0]
    heatmap = last_conv_layer_output @ pooled_grads[..., tf.newaxis]
    heatmap = tf.squeeze(heatmap)

    # For visualization purpose, we will also normalize the heatmap between 0 & 1
    heatmap = tf.maximum(heatmap, 0) / tf.math.reduce_max(heatmap)
    return heatmap.numpy()

import matplotlib.cm as cm

from IPython.display import Image, display

def save_and_display_gradcam(img_path , heatmap, cam_path="cam.jpg", alpha=0.4):
    """
    img input shoud not be expanded 
    """

    # Load the original image
    img = keras.preprocessing.image.load_img(img_path)
    img = keras.preprocessing.image.img_to_array(img)

    
    # Rescale heatmap to a range 0-255
    heatmap = np.uint8(255 * heatmap)

    # Use jet colormap to colorize heatmap
    jet = cm.get_cmap("jet")

    # Use RGB values of the colormap
    jet_colors = jet(np.arange(256))[:, :3]
    jet_heatmap = jet_colors[heatmap]

    # Create an image with RGB colorized heatmap
    jet_heatmap = keras.preprocessing.image.array_to_img(jet_heatmap)
    jet_heatmap = jet_heatmap.resize((img.shape[1], img.shape[0]))
    jet_heatmap = keras.preprocessing.image.img_to_array(jet_heatmap)

    # Superimpose the heatmap on original image
    superimposed_img = jet_heatmap * alpha + img
    superimposed_img = keras.preprocessing.image.array_to_img(superimposed_img)

    # Save the superimposed image
    superimposed_img.save(cam_path)

    # Display Grad CAM
    display(Image(cam_path))

# function that is used to predict the image type and the ares that are affected by covid


def image_prediction_and_visualization(path,last_conv_layer_name = "conv5_block3_3_conv", model = model):
  """
  input:  is the image path, name of last convolution layer , model name
  output : returs the predictions and the area that is effected
  """
  
  img_array = get_img_array(path)

  heatmap = make_gradcam_heatmap(img_array, model, last_conv_layer_name)

  plt.title("the heat map of the image is ")
  plt.imshow(heatmap)
  plt.show()
  print()
  img = get_img_array(path)

  res = class_type[np.argmax(model.predict(img))]
  print(f"The given X-Ray image is of type = {res}")
  print()
  print(f"The chances of image being Covid is : {model.predict(img)[0][0]*100} %")
  print(f"The chances of image being Normal is : {model.predict(img)[0][1]*100} %")

  print()
  print("image with heatmap representing region on interest")

  # function call
  save_and_display_gradcam(path, heatmap)

  print()
  print("the original input image")
  print()

  a = plt.imread(path)
  plt.imshow(a, cmap = "gray")
  plt.title("Original image")
  plt.show()

#predictions
# provide the path of any image from google or any other scource 
# the path is already defigned above , but you can also provide the path here to avoid scrolling up 

# for covid image :  path:- provide any image from google or provide image from all image folder
path = "/content/all_images/COVID-2554.png"

image_prediction_and_visualization(path)

# for normal image :  path:- provide any image from google or provide image from all image folder
path = "/content/all_images/train_test_split/validation/Normal/Normal-1004.png"

image_prediction_and_visualization(path)

# for a healthey chest x-Ray heap map will be white thus the x-ray will look blue